import React from 'react'import get from 'lodash/get'import Helmet from 'react-helmet'import ArticlePreview from "../components/category-preview";import Hero from "../components/hero";import Navigation from "../components/navigation";import Footer from "../components/footer";class Kategorien extends React.Component {    render() {        const category = get(this, 'props.data.allContentfulCategory.edges')        const [author] = get(this, 'props.data.allContentfulPerson.edges');        return (            <div className="container">                <Helmet>                    <title>Boulder Boys - Kategorien</title>                    <meta charSet="utf-8"/>                    <meta name="description"                          content="bouldern wo, boulder tipps, boulder ausrÃ¼stung, boulder boys vlog"/>                </Helmet>                <Hero data={author.node}/>                <Navigation/>                <div style={{textAlign: 'justify'}}>                    <div className="wrapper">                        <ul className="category-list">                            {category.map(({node}) => {                                return (                                    <li key={node.slug}>                                        <ArticlePreview category={node}/>                                    </li>                                )                            })}                        </ul>                    </div>                </div>                <Footer/>            </div>        )    }}export default Kategorienexport const pageQuery = graphql`  query KategorienQuery {    allContentfulPerson(filter: { id: { eq: "c15jwOBqpxqSAOy2eOO4S0m" } }) {      edges {        node {          name          heroImage: image {            sizes(              maxWidth: 3728              maxHeight: 2376              resizingBehavior: PAD              background: "rgb:FFFFFF"            ) {              ...GatsbyContentfulSizes_tracedSVG            }          }        }      }    }    allContentfulCategory{    edges{        node{            title            categoryImage {            sizes(maxWidth: 400, maxHeight: 400, resizingBehavior: FILL) {             ...GatsbyContentfulSizes_tracedSVG            }          }         }     }    }  }`